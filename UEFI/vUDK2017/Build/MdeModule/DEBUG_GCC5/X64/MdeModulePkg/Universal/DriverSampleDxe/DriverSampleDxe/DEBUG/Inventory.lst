//
//  VFR compiler version  2.01 (UEFI 2.4) 
//
extern unsigned char DriverSampleStrings[];
extern EFI_GUID gEfiHiiPlatformSetupFormsetGuid;
extern EFI_GUID gEfiHiiDriverHealthFormsetGuid;
extern EFI_GUID gEfiHiiUserCredentialFormsetGuid;
extern EFI_GUID gEfiHiiStandardFormGuid;
extern EFI_GUID { 0xA04A27f4, 0xDF00, 0x4D42, { 0xB5, 0x52, 0x39, 0x51, 0x13, 0x02, 0x11, 0x3D }};
extern EFI_GUID { 0xb3f56470, 0x6141, 0x4621, { 0x8f, 0x19, 0x70, 0x4e, 0x57, 0x7a, 0xa9, 0xe8 }};
extern EFI_GUID { 0xF5E655D9, 0x02A6, 0x46f2, { 0x9E, 0x76, 0xB8, 0xBE, 0x8E, 0x60, 0xAB, 0x22 }};
extern EFI_GUID gZeroGuid;
#pragma pack(1)
typedef struct {
  UINT16 NestByteField;
  UINT8 : 1;
  UINT8 NestBitCheckbox : 1;
  UINT8 NestBitOneof : 2;
  UINT8 : 0;
  UINT8 NestBitNumeric : 4;
} MY_BITS_DATA;
typedef union {
  UINT16 BitField : 10;
  UINT8 ByteField;
} MY_EFI_UNION_DATA;
typedef struct {
  UINT16 MyStringData[40];
  UINT16 SomethingHiddenForHtml;
  UINT8 HowOldAreYouInYearsManual;
  UINT16 HowTallAreYouManual;
  UINT8 HowOldAreYouInYears;
  UINT16 HowTallAreYou;
  UINT8 MyFavoriteNumber;
  UINT8 TestLateCheck;
  UINT8 TestLateCheck2;
  UINT8 QuestionAboutTreeHugging;
  UINT8 ChooseToActivateNuclearWeaponry;
  UINT8 SuppressGrayOutSomething;
  UINT8 OrderedList[8];
  UINT16 BootOrder[8];
  UINT8 BootOrderLarge;
  UINT8 DynamicRefresh;
  UINT8 DynamicOneof;
  UINT8 DynamicOrderedList[5];
  UINT8 Reserved;
  EFI_HII_REF RefData;
  UINT8 NameValueVar0;
  UINT16 NameValueVar1;
  UINT16 NameValueVar2[20];
  UINT8 SerialPortNo;
  UINT8 SerialPortStatus;
  UINT16 SerialPortIo;
  UINT8 SerialPortIrq;
  UINT8 GetDefaultValueFromCallBack;
  UINT8 GetDefaultValueFromAccess;
  EFI_HII_TIME Time;
  UINT8 RefreshGuidCount;
  UINT8 Match2;
  UINT8 GetDefaultValueFromCallBackForOrderedList[3];
  UINT8 BitCheckbox : 1;
  UINT16 BitOneof : 6;
  UINT16 BitNumeric : 12;
  MY_BITS_DATA MyBitData;
  MY_EFI_UNION_DATA MyUnionData;
} DRIVER_SAMPLE_CONFIGURATION;
typedef struct {
  UINT8 Field8;
  UINT16 Field16;
  UINT8 OrderedList[3];
  UINT16 SubmittedCallback;
} MY_EFI_VARSTORE_DATA;
typedef struct {
  MY_BITS_DATA BitsData;
  UINT32 EfiBitGrayoutTest : 5;
  UINT32 EfiBitNumeric : 4;
  UINT32 EfiBitOneof : 10;
  UINT32 EfiBitCheckbox : 1;
} MY_EFI_BITS_VARSTORE_DATA;
#pragma pack()
formset
>00000000: 0E A7 70 64 F5 B3 41 61 21 46 8F 19 70 4E 57 7A A9 E8 02 00 03 00 01 71 99 03 93 45 85 04 4B B4 5E 32 EB 83 26 04 0E 
>00000027: 5C 06 00 00 00 00 
>0000002D: 5C 06 00 00 01 00 
  guid = { 0xb3f56470, 0x6141, 0x4621, {0x8f, 0x19, 0x70, 0x4e, 0x57, 0x7a, 0xa9, 0xe8} },
  title = STRING_TOKEN(0x0002),
  help = STRING_TOKEN(0x0003),
  form formid = 1,
>00000033: 01 86 01 00 04 00 
       title = STRING_TOKEN(0x0004);
   text
>00000039: 03 08 05 00 06 00 12 00 
      help = STRING_TOKEN(0x0006),
      text = STRING_TOKEN(0x0005),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000041: 03 08 07 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x0007),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000049: 03 08 08 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x0008),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000051: 03 08 09 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x0009),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
    subtitle text = STRING_TOKEN(0x0012);
>00000059: 02 87 12 00 00 00 00 
>00000060: 29 02 
   text
>00000062: 03 08 0A 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000A),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>0000006A: 03 08 0B 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000B),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000072: 03 08 0C 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000C),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>0000007A: 03 08 0D 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000D),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000082: 03 08 0E 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000E),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>0000008A: 03 08 0F 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x000F),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
   text
>00000092: 03 08 10 00 12 00 12 00 
      help = STRING_TOKEN(0x0012),
      text = STRING_TOKEN(0x0010),
     text = STRING_TOKEN(0x0012),
      flags = 0,
      key = 0;
    text
      help = STRING_TOKEN(0x0021),
      text = STRING_TOKEN(0x0021),
      flags = INTERACTIVE,
>0000009A: 0C 8F 21 00 21 00 31 12 00 00 FF FF 04 00 00 
      key = 0x1231;
>000000A9: 29 02 
    subtitle text = STRING_TOKEN(0x0012);
>000000AB: 02 87 12 00 00 00 00 
>000000B2: 29 02 
    subtitle text = STRING_TOKEN(0x0011);
>000000B4: 02 87 11 00 00 00 00 
>000000BB: 29 02 
  endform;
>000000BD: 29 02 
endformset;
>000000BF: 29 02 

//
// All Opcode Record List 
//
>00000000: 0E A7 70 64 F5 B3 41 61 21 46 8F 19 70 4E 57 7A A9 E8 02 00 03 00 01 71 99 03 93 45 85 04 4B B4 5E 32 EB 83 26 04 0E 
>00000027: 5C 06 00 00 00 00 
>0000002D: 5C 06 00 00 01 00 
>00000033: 01 86 01 00 04 00 
>00000039: 03 08 05 00 06 00 12 00 
>00000041: 03 08 07 00 12 00 12 00 
>00000049: 03 08 08 00 12 00 12 00 
>00000051: 03 08 09 00 12 00 12 00 
>00000059: 02 87 12 00 00 00 00 
>00000060: 29 02 
>00000062: 03 08 0A 00 12 00 12 00 
>0000006A: 03 08 0B 00 12 00 12 00 
>00000072: 03 08 0C 00 12 00 12 00 
>0000007A: 03 08 0D 00 12 00 12 00 
>00000082: 03 08 0E 00 12 00 12 00 
>0000008A: 03 08 0F 00 12 00 12 00 
>00000092: 03 08 10 00 12 00 12 00 
>0000009A: 0C 8F 21 00 21 00 31 12 00 00 FF FF 04 00 00 
>000000A9: 29 02 
>000000AB: 02 87 12 00 00 00 00 
>000000B2: 29 02 
>000000B4: 02 87 11 00 00 00 00 
>000000BB: 29 02 
>000000BD: 29 02 
>000000BF: 29 02 

Total Size of all record is 0x000000C1


***************************************************************
		mPackAlign = 1
		struct MY_EFI_BITS_VARSTORE_DATA : mAlign [1] mTotalSize [0x8]

		struct MY_EFI_BITS_VARSTORE_DATA {
			+00000000[00000000] BitsData <MY_BITS_DATA>
			+00000004[00000004] EfiBitGrayoutTest <UINT32>
			+00000004[00000004] EfiBitNumeric <UINT32>
			+00000004[00000004] EfiBitOneof <UINT32>
			+00000004[00000004] EfiBitCheckbox <UINT32>
		};
---------------------------------------------------------------
		struct MY_EFI_VARSTORE_DATA : mAlign [1] mTotalSize [0x8]

		struct MY_EFI_VARSTORE_DATA {
			+00000000[00000000] Field8 <UINT8>
			+00000001[00000001] Field16 <UINT16>
			+00000003[00000003] OrderedList[3] <UINT8>
			+00000006[00000006] SubmittedCallback <UINT16>
		};
---------------------------------------------------------------
		struct DRIVER_SAMPLE_CONFIGURATION : mAlign [1] mTotalSize [0xda]

		struct DRIVER_SAMPLE_CONFIGURATION {
			+00000000[00000000] MyStringData[40] <UINT16>
			+00000080[00000050] SomethingHiddenForHtml <UINT16>
			+00000082[00000052] HowOldAreYouInYearsManual <UINT8>
			+00000083[00000053] HowTallAreYouManual <UINT16>
			+00000085[00000055] HowOldAreYouInYears <UINT8>
			+00000086[00000056] HowTallAreYou <UINT16>
			+00000088[00000058] MyFavoriteNumber <UINT8>
			+00000089[00000059] TestLateCheck <UINT8>
			+00000090[0000005a] TestLateCheck2 <UINT8>
			+00000091[0000005b] QuestionAboutTreeHugging <UINT8>
			+00000092[0000005c] ChooseToActivateNuclearWeaponry <UINT8>
			+00000093[0000005d] SuppressGrayOutSomething <UINT8>
			+00000094[0000005e] OrderedList[8] <UINT8>
			+00000102[00000066] BootOrder[8] <UINT16>
			+00000118[00000076] BootOrderLarge <UINT8>
			+00000119[00000077] DynamicRefresh <UINT8>
			+00000120[00000078] DynamicOneof <UINT8>
			+00000121[00000079] DynamicOrderedList[5] <UINT8>
			+00000126[0000007e] Reserved <UINT8>
			+00000127[0000007f] RefData <EFI_HII_REF>
			+00000149[00000095] NameValueVar0 <UINT8>
			+00000150[00000096] NameValueVar1 <UINT16>
			+00000152[00000098] NameValueVar2[20] <UINT16>
			+00000192[000000c0] SerialPortNo <UINT8>
			+00000193[000000c1] SerialPortStatus <UINT8>
			+00000194[000000c2] SerialPortIo <UINT16>
			+00000196[000000c4] SerialPortIrq <UINT8>
			+00000197[000000c5] GetDefaultValueFromCallBack <UINT8>
			+00000198[000000c6] GetDefaultValueFromAccess <UINT8>
			+00000199[000000c7] Time <EFI_HII_TIME>
			+00000202[000000ca] RefreshGuidCount <UINT8>
			+00000203[000000cb] Match2 <UINT8>
			+00000204[000000cc] GetDefaultValueFromCallBackForOrderedList[3] <UINT8>
			+00000207[000000cf] BitCheckbox <UINT8>
			+00000208[000000d0] BitOneof <UINT16>
			+00000210[000000d2] BitNumeric <UINT16>
			+00000212[000000d4] MyBitData <MY_BITS_DATA>
			+00000216[000000d8] MyUnionData <MY_EFI_UNION_DATA>
		};
---------------------------------------------------------------
		struct MY_EFI_UNION_DATA : mAlign [1] mTotalSize [0x2]

		struct MY_EFI_UNION_DATA {
			+00000000[00000000] BitField <UINT16>
			+00000000[00000000] ByteField <UINT8>
		};
---------------------------------------------------------------
		struct MY_BITS_DATA : mAlign [1] mTotalSize [0x4]

		struct MY_BITS_DATA {
			+00000000[00000000] NestByteField <UINT16>
			+00000002[00000002]  <UINT8>
			+00000002[00000002] NestBitCheckbox <UINT8>
			+00000002[00000002] NestBitOneof <UINT8>
			+00000002[00000002]  <UINT8>
			+00000003[00000003] NestBitNumeric <UINT8>
		};
---------------------------------------------------------------
		struct EFI_HII_REF : mAlign [16] mTotalSize [0x16]

		struct EFI_HII_REF {
			+00000000[00000000] QuestionId <UINT16>
			+00000002[00000002] FormId <UINT16>
			+00000004[00000004] FormSetGuid <(null)>
			+00000020[00000014] DevicePath <EFI_STRING_ID>
		};
---------------------------------------------------------------
		struct EFI_HII_TIME : mAlign [1] mTotalSize [0x3]

		struct EFI_HII_TIME {
			+00000000[00000000] Hours <UINT8>
			+00000001[00000001] Minutes <UINT8>
			+00000002[00000002] Seconds <UINT8>
		};
---------------------------------------------------------------
		struct EFI_STRING_ID : mAlign [2] mTotalSize [0x2]

		struct EFI_STRING_ID {
		};
---------------------------------------------------------------
		struct EFI_HII_DATE : mAlign [2] mTotalSize [0x4]

		struct EFI_HII_DATE {
			+00000000[00000000] Year <UINT16>
			+00000002[00000002] Month <UINT8>
			+00000003[00000003] Day <UINT8>
		};
---------------------------------------------------------------
		struct BOOLEAN : mAlign [1] mTotalSize [0x1]

		struct BOOLEAN {
		};
---------------------------------------------------------------
		struct UINT8 : mAlign [1] mTotalSize [0x1]

		struct UINT8 {
		};
---------------------------------------------------------------
		struct UINT16 : mAlign [2] mTotalSize [0x2]

		struct UINT16 {
		};
---------------------------------------------------------------
		struct UINT32 : mAlign [4] mTotalSize [0x4]

		struct UINT32 {
		};
---------------------------------------------------------------
		struct UINT64 : mAlign [8] mTotalSize [0x8]

		struct UINT64 {
		};
---------------------------------------------------------------
***************************************************************
